version: '3.9'

networks:
  mynetwork:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${DOCKER_NET}

services:
  db:
    build:
      context: ./db
      args:
        - DB_REPL_USER=${DB_REPL_USER}
        - DB_REPL_PASSWORD=${DB_REPL_PASSWORD}
        - DB_PORT=${DB_PORT}
    command:
      - "postgres"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "listen_addresses=*"
      - "-c"
      - "unix_socket_directories=/var/run/postgresql"
      - "-c"
      - "log_replication_commands=on"
      - "-c"
      - "logging_collector=on"
      - "-c"
      - "log_directory=/tmp/"
      - "-c"
      - "log_filename=pg.log"
      - "-c"
      - "log_file_mode=0664"
      - "-c"
      - "max_wal_senders=10"
      - "-c"
      - "wal_level=replica"
      - "-c"
      - "wal_log_hints=on"
      - "-c"
      - "password_encryption=scram-sha-256"
    container_name: db-image
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USER}
    ports:
      - ${DB_PORT}:5432
    networks:
      mynetwork:
        ipv4_address: ${DB_HOST}
    env_file:
      - .env
    volumes:
      - db_data:/var/lib/postgresql/data
      - /tmp/:/tmp/

  db_repl:
    build:
      context: ./db_repl
      args:
        - DB_REPL_PORT=${DB_REPL_PORT}
    container_name: db-repl-image
    environment:
      - POSTGRES_USER=${DB_REPL_USER}
      - POSTGRES_PASSWORD=${DB_REPL_PASSWORD}
    command: |
      bash -c "
      rm -rf /var/lib/postgresql/data/*
      until PGPASSWORD=${DB_REPL_PASSWORD} pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --username=${DB_REPL_USER} --host=db --port=${DB_PORT}
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chown -R postgres:postgres /var/lib/postgresql/data
      chmod 0700 /var/lib/postgresql/data
      su - postgres -c '/usr/lib/postgresql/15/bin/postgres -D /var/lib/postgresql/data'
      "
    networks:
      mynetwork:
        ipv4_address: ${DB_REPL_HOST}
    ports:
      - ${DB_REPL_PORT}:5432
    env_file:
      - .env
    depends_on:
      - db
  bot:
    build:
      context: ./bot
    container_name: bot-image
    networks:
      mynetwork:
    env_file:
      - .env

volumes:
  db_data:
